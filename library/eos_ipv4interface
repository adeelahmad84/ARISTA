#!/usr/bin/python
#
# Copyright (c) 2014, Arista Networks, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#   Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in the
#   documentation and/or other materials provided with the distribution.
#
#   Neither the name of Arista Networks nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ARISTA NETWORKS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
# BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
# IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
DOCUMENTATION = """
module: eos_interface
short_description: Generic module to manage interfaces in EOS
description:
  - Provides state management for any interface in EOS.  The interface
    attributes supported in this module are available on any interface
    available on the EOS node
author: Arista EOS+
notes:
requirements:
  - Arista EOS 4.12.0 or later
  - EOS command API enabled
  - pyeapy 0.1.1 or later
options:
  name:
    description:
      - The unique interface identifier name.  The interface name must use
        the full interface name (no abbreviated names).  For example,
        interfaces should be specified as Ethernet1 not Et1
    required: true
  address:
    description:
      - Configures the IPv4 address for the interface.  The value must be
        in the form of A.B.C.D/E
    required: false
  mtu:
    description:
      - Sets the IP interface MTU value.  The MTU value defines the maximum
        transmission unit (or packet size) that can traverse the link.  Valid
        values are in the range of 68 to 65535 bytes
    required: false
  config:
    description:
      - Configures the path to the pyeapi config file
  connection:
    description:
      - Configures the name of the connection to use from the eapi.conf file
    default: 'localhost'
  state:
    description:
      - The state of the VLAN related to the current running configuration
    default: 'present'
    choices: ['present', 'absent']
  null_as_default:
    description:
      - Instructs the module how to handle null values.  If this flag is set
        then null values trigger default configuration otherwise do nothing
    default: false
    choices: BOOLEANS
"""
import syslog

from ansible.module_utils.basic import *

import pyeapi

def log(entry):
    """ Writes an entry to the local syslog

    Args:
        entry (str): The text string to write to syslog

    """
    syslog.openlog('ansible-eos')
    syslog.syslog(syslog.LOG_NOTICE, str(entry))

def get_instance(node, name):
    """ Returns  the interface properties for the specified name

    Response

    .. code-block:: json

        {
            "name": <string>,
            "state": [absent, present],
            "address": <string>,
            "mtu": <string>
        }

    Args:
        node (Node): An instance of pyeapi.client.Node
        name (str): The interface identifier to return

    Returns:
        A Python dictionary object that represents the interface resource

    """
    result = node.api('ipinterfaces').get(name)
    instance = dict(name=name, state='absent')
    if result:
        instance['state'] = 'present'
        instance['address'] = result['address']
        instance['mtu'] = str(result['mtu'])
    return instance

def create_instance(node, name):
    """Creates a new instance of interface on the node

    Args:
        node (Node): An instance of pyepai.client.Node
        name (str): The interface identifier to create

    Returns:
        A Python dictionary object that represents the interface resource from
            the node's running configuration

    """
    node.api('ipinterfaces').create(name)
    return get_instance(node, name)

def set_attribute(node, method_name, name, value, default):
    log('Invoked %s for interface %s with value %s and default %s'\
        % (method_name, name, value, default))
    method = getattr(node.api('ipinterfaces'), method_name)
    return method(name, value, default)

def set_address(node, name, **kwargs):
    """ Configures the IP address attribute for the interface

    Args:
        node (Node): An instance of pyeapi.client.Node used for sending and
            receiveing eAPI messages
        name (str): The interface to configure the value for
        kwargs: Optional keyword arguments

    Returns:
        True if the command was completed successfully otherwise False is
            returned

    """
    default = kwargs.get('default', False)
    value = kwargs['address']
    return set_attribute(node, 'set_address', name, value, default)

def set_mtu(node, name, **kwargs):
    """ Configures the IP MTU attribute for the interface

    Args:
        node (Node): An instance of pyeapi.client.Node used for sending and
            receiveing eAPI messages
        name (str): The interface to configure the value for
        kwargs: Optional keyword arguments

    Returns:
        True if the command was completed successfully otherwise False is
            returned

    """
    default = kwargs.get('default', False)
    value = kwargs['mtu']
    return set_attribute(node, 'set_mtu', name, value, default)

def main():
    """ The main module routine called when the module is run by Ansible
    """

    argument_spec = dict(
        name=dict(required=True),
        address=dict(),
        mtu=dict(),
        config=dict(),
        connection=dict(default='localhost'),
        null_as_default=dict(type='bool', default=False),
        state=dict(default='present', choices=['present', 'absent'])
    )

    module = AnsibleModule(argument_spec=argument_spec,
                           supports_check_mode=True)

    if module.params['config']:
        pyeapi.load_config(module.params['config'])
    node = pyeapi.connect_to(module.params['connection'])

    result = dict(changed=False, created=False, removed=False, changes=dict())
    state = module.params['state']
    null_as_default = module.params['null_as_default']

    name = module.params['name']

    attributes = {
        'name': name,
        'address': module.params['address'],
        'mtu': module.params['mtu']
    }

    instance = get_instance(node, name)

    if state == 'present':
        if instance['state'] == 'absent':
            if not module.check_mode:
                instance = create_instance(node, name)
            result['created'] = True

        changeset = attributes.viewitems() - instance.viewitems()
        for key, value in changeset:
            func = 'set_%s' % key
            if func in globals():
                command = globals().get(func)
                default = value is None and null_as_default
                if value is not None or default:
                    if not result['created']:
                        result['changes'][key] = value
                        result['changed'] = True
                    if not module.check_mode:
                        command(node, **attributes)

    elif instance['state'] == 'present' and state == 'absent':
        result['removed'] = True
        if not module.check_mode:
            node.api('ipinterfaces').delete(name)

    result['instance'] = get_instance(node, name)
    module.exit_json(**result)

main()
